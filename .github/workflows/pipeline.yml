name: Pipeline

on: [push]
env:
  APPLICATION_NAME: app2
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
jobs:
  lint:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Setup Python environment
      uses: actions/setup-python@v1.1.1
    - name: Install requirements
      run: pip install --quiet --requirement requirements.txt
    - name: Lint code
      run: |
        flake8 --ignore=E501,E231 *.py
        pylint --disable=C0301 --disable=C0326 *.py
    - name: Run unit tests
      run: |
        python -m unittest --verbose --failfast        

  build_image:
    needs: [lint]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
#     - name: Set up GCloud
#       uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
#       with:
#         version: '274.0.1'
#         service_account_email: ${{ secrets.GCP_SERVICE_ACCT_EMAIL }}
#         service_account_key: ${{ secrets.GCP_SERVICE_ACCT_KEY }}
#     - run: |
#         gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
#         gcloud config set run/region ${{ secrets.GCP_REGION }}
#         gcloud auth configure-docker
#         gcloud info
    
    - name: Build and tag image bydocker
      run: docker build -t "gcr.io/${{ env.APPLICATION_NAME }}:latest" .
    - name: Run unit tests in container
      run: docker run "gcr.io/${{ env.APPLICATION_NAME }}:latest" -m unittest --verbose --failfast
      
    - name: Docker Login
      # You may pin to the exact commit or the version.
      # uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
      uses: docker/login-action@v1.9.0
      with:
        # Server address of Docker registry. If not set then will default to Docker Hub
#         registry: # optional
        # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_USERNAME }}
        # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_PASSWORD }}
        # Log out from the Docker registry at the end of a job
#         logout: # optional, default is true

    - name: Build and push Docker images
      # You may pin to the exact commit or the version.
      # uses: docker/build-push-action@e1b7f96249f2e4c8e4ac1519b9608c0d48944a1f
      uses: docker/build-push-action@v2.4.0
      with:
        # Path to the Dockerfile
        file: "gcr.io/${{ env.APPLICATION_NAME }}:latest"  
        # Sets the target stage to build
#         target: # optional
        # GitHub Token used to authenticate against a repository for Git context
        github-token:  ${{ github.token }}

      
#     - name: Push to GCP image registry
#       run: docker push gcr.io/${{ secrets.MY_SECRET_ID }}/${{ env.APPLICATION_NAME }}:latest

#   test_image:
#     needs: [build_image]
#     runs-on: ubuntu-18.04
#     steps:
#     - name: Set up GCloud
#       uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
#       with:
#         version: '274.0.1'
#         service_account_email: ${{ secrets.GCP_SERVICE_ACCT_EMAIL }}
#         service_account_key: ${{ secrets.GCP_SERVICE_ACCT_KEY }}
#     - run: |
#         gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
#         gcloud config set run/region ${{ secrets.GCP_REGION }}
#         gcloud auth configure-docker
#         gcloud info
      
   
#   deploy:
#     needs: [test_image]
#     runs-on: ubuntu-18.04
#     steps:
#     - name: Set up GCloud
#       uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
#       with:
#         version: '274.0.1'
#         service_account_email: ${{ secrets.GCP_SERVICE_ACCT_EMAIL }}
#         service_account_key: ${{ secrets.GCP_SERVICE_ACCT_KEY }}
#     - run: |
#         gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
#         gcloud config set run/region ${{ secrets.GCP_REGION }}
#         gcloud info
        
#     - name: Deploy to Cloud Run
#       run: gcloud run deploy ${{ env.APPLICATION_NAME }} --image=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ env.APPLICATION_NAME }}:latest --platform=managed --allow-unauthenticated

#     - name: Test deployment
#       run: |
#         DEPLOY_URL=$(gcloud run services describe app2 --platform=managed --region=us-central1 | grep https)
#         curl -sL --max-time 300 -o /dev/null -w "%{http_code}" $DEPLOY_URL | grep 200 || exit 1
